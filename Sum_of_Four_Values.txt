#include<iostream>
using namespace std;
void qsort(int a[], int b[], int i, int j)
{
    if(i>=j)
        return;
    int left = i, right = j, pivot = a[(i+j)/2];
    while(i<=j)
    {
        while(a[i]<pivot)
            i++;
        while(a[j]>pivot)
            j--;
        if(i<=j)
        {
            swap(a[i], a[j]);
            swap(b[i], b[j]);
            i++;
            j--;
        }
    }
    qsort(a, b, left, j);
    qsort(a, b, i, right);
}
int b_search(int a[], int i, int j, int element)
{   
    if(i>j)
        return -1;
    int middle = (i+j)/2;
    while(i<=j)
    {
        if(a[middle]<element)
            i = middle+1;
        else if(a[middle]==element)
            return middle;
        else
            j = middle-1;
        middle = (i+j)/2;
    }
    return -1;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n, sum = 0, x = 0, flag = 0;
    cin>>n>>sum;
    int a[n], index[n];
    for(int i=0;i<n;i++)
        {cin>>a[i];index[i] = i+1;}
    qsort(a, index, 0, n-1);
    int i=0, j=n-1, k=1;
    while(j>1)
    {
        if(a[i]+a[j]+a[k]<sum){
        while(i<j-1)
        {
            while(k<j)
            {
                x = a[i] + a[k] + a[j];
                if(sum - x>=a[k]&&sum-x<=a[j]){
                if(b_search(a, k+1, j-1, sum - x)==-1)
                    k++;
                else
                {
                    cout<<index[i]<<" "<<index[k]<<" "<<index[b_search(a, k+1, j-1, sum - x)]<<" "<<index[j];
                    flag = 1;
                    break;
                }
                }
                else
                    k++;
            }
            if(flag)
                break;
            i++;
            k = i+1;
        }
        }
        if(flag)
            break;
        j--;
        i = 0;
        k = 1;
    }
    if(!flag)
        cout<<"IMPOSSIBLE";
}
